<!DOCTYPE html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta http-equiv="X-UA-Compatible" content="IE=edge" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<script type="text/javascript" src="/socket.io/socket.io.js"></script>
		<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
		<script src="/js/game.js"></script>
		<!-- <script src="/js/Sprite.js"></script>
		<script src="/js/Fighter.js"></script> -->
		<!-- <script src="/js/game.js"></script> -->
		<link rel="stylesheet" href="/css/style.css" />
		<title>StreetFighter</title>
	</head>
	<body>
		<div id="container">
			<div id="statusBar">
				<!-- player1 Health -->
				<div id="playerStatusBar">
					<div id="playerHealthUnder"></div>
					<div id="playerHealth"></div>
				</div>
				<!-- Timer -->
				<div id="timer">10</div>
				<!-- Player2 Health -->
				<div id="enemyStatusBar">
					<div id="enemyHealthUnder"></div>
					<div id="enemyHealth"></div>
				</div>
			</div>
			<div id="result">Tie</div>
			<canvas id="canvas"></canvas>
		</div>
		<!-- <script>
			// Connect to the server with Socket.IO
			// const socket = io();
			socket.on("error", (message) => {
				alert(message);
			});
			const canvas = document.querySelector("canvas");
			const c = canvas.getContext("2d");

			// canvas.width = 1024;
			// canvas.height = 576;

			// c.fillRect(0, 0, canvas.width, canvas.height);

			const gravity = 0.7;
			
			const background = new Sprite({
				position: {
					x: 0,
					y: 0,
				},
				imageSrc: "../images/backgrounds-51.gif",
			});
			
			const player = new Fighter({
				position: {
					x: 0,
					y: 0,
				},
				velocity: {
					x: 0,
					y: 0,
				},
				offset: {
					x: 0,
					y: 0,
				},
			});

			const enemy = new Fighter({
				position: {
					x: 400,
					y: 100,
				},
				velocity: {
					x: 0,
					y: 0,
				},
				color: "blue",
				offset: {
					x: -50,
					y: 0,
				},
			});

			console.log(player);
			

			function rectangularCollision({ rectangle1, rectangle2 }) {
				return (
					rectangle1.attackBox.position.x + rectangle1.attackBox.width >= rectangle2.position.x &&
					rectangle1.attackBox.position.x <= rectangle2.position.x + rectangle2.width &&
					rectangle1.attackBox.position.y + rectangle1.attackBox.height >= rectangle2.position.y &&
					rectangle1.attackBox.position.y <= rectangle2.position.y + rectangle2.height
				);
			}
			// determine who wins
			function determineWinner({ player, enemy, timerId }) {
				clearTimeout(timerId);
				document.getElementById("result").style.display = "flex";
				if (player.health === enemy.health) {
					document.getElementById("result").innerHTML = "Tie";
				} else if (player.health > enemy.health) {
					document.getElementById("result").innerHTML = "Player 1 wins";
				} else if (player.health < enemy.health) {
					document.getElementById("result").innerHTML = "Player 2 wins";
				}
			}
			// Timer
			let timer = 60;
			let timerId;
			function decreaseTimer() {
				if (timer > 0) {
					timerId = setTimeout(decreaseTimer, 1000);
					timer--;
					document.querySelector("#timer").innerHTML = timer;
				}
				if (timer === 0) {
					determineWinner({ player, enemy, timerId });
				}
			}
			decreaseTimer();

			function animate() {
				window.requestAnimationFrame(animate);
				c.fillStyle = "black";
				c.fillRect(0, 0, canvas.width, canvas.height);
				background.update();
				player.update();
				enemy.update();

				player.velocity.x = 0;
				enemy.velocity.x = 0;

				// player movement
				if (keys.a.pressed && player.lastKey === "a") {
					player.velocity.x = -5;
				} else if (keys.d.pressed && player.lastKey === "d") {
					player.velocity.x = 5;
				}
				// enemy movement
				if (keys.ArrowLeft.pressed && enemy.lastKey === "ArrowLeft") {
					enemy.velocity.x = -5;
				} else if (keys.ArrowRight.pressed && enemy.lastKey === "ArrowRight") {
					enemy.velocity.x = 5;
				}

				// detect player attack collision
				if (
					rectangularCollision({
						rectangle1: player,
						rectangle2: enemy,
					}) &&
					player.isAttacking
				) {
					player.isAttacking = false;
					enemy.health -= 20;
					document.querySelector("#enemyHealth").style.width = enemy.health + "%";
				}
				// detect enemy attack collision
				if (
					rectangularCollision({
						rectangle1: enemy,
						rectangle2: player,
					}) &&
					enemy.isAttacking
				) {
					enemy.isAttacking = false;
					player.health -= 20;
					document.querySelector("#playerHealth").style.width = player.health + "%";
				}

				if (enemy.health <= 0 || player.health <= 0) {
					determineWinner({ player, enemy, timerId });
				}
			}
			// window.addEventListener("DOMContentLoaded", (event) => {
				animate();
				decreaseTimer();
				const keys = {
				a: {
					pressed: false,
				},
				d: {
					pressed: false,
				},
				w: {
					pressed: false,
				},
				ArrowLeft: {
					pressed: false,
				},
				ArrowRight: {
					pressed: false,
				},
				ArrowUp: {
					pressed: false,
				},
			};
				document.addEventListener("keydown", (event) => {
					switch (event.key) {
						case "d":
							keys.d.pressed = true;
							player.lastKey = "d";
							break;
						case "a":
							keys.a.pressed = true;
							player.lastKey = "a";
							break;
						case "w":
							player.velocity.y = -20;
							break;
						case " ":
							player.attack();
							break;

						// enemy keys
						case "ArrowRight":
							keys.ArrowRight.pressed = true;
							enemy.lastKey = "ArrowRight";
							break;
						case "ArrowLeft":
							keys.ArrowLeft.pressed = true;
							enemy.lastKey = "ArrowLeft";
							break;
						case "ArrowUp":
							enemy.velocity.y = -20;
							break;
						case "ArrowDown":
							enemy.attack();
							break;
					}
					// console.log(event.key);
				});

				window.addEventListener("keyup", (event) => {
					switch (event.key) {
						case "d":
							keys.d.pressed = false;
							break;
						case "a":
							keys.a.pressed = false;
							break;
						case "w":
							keys.w.pressed = false;
							break;

						// enemy keys
						case "ArrowRight":
							keys.ArrowRight.pressed = false;
							break;
						case "ArrowLeft":
							keys.ArrowLeft.pressed = false;
							break;
						case "ArrowUp":
							keys.ArrowUp.pressed = false;
							break;
					}
					// console.log(event.key);
				});
			// });
		</script> -->
	</body>
</html>
